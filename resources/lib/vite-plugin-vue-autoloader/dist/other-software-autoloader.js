import { normalizePath as l } from "vite";
import a from "node:fs";
import * as O from "node:path";
import p, { basename as $, parse as D, resolve as m } from "node:path";
function T(t, e = [".vue"], r = []) {
  return a.existsSync(t) && a.readdirSync(t).forEach((s) => {
    const n = p.join(t, s);
    a.statSync(n).isDirectory() ? r = T(n, e, r) : e.forEach((u) => {
      n.endsWith(u) && r.push(n);
    });
  }), r;
}
function h(t) {
  return t.charAt(0).toUpperCase() + t.slice(1);
}
function I(t, e, r = void 0) {
  e = l(e), t = l(t);
  let o = e.replace(t, "").replace(/^\//, "").replace(".vue", "").split("/").join(".");
  return r ? r + "::" + o : o;
}
function j(t, e, r = void 0) {
  e = l(e), t = l(t);
  let o = e.replace(t, "").replace(/^\//, "").replace(".vue", "").split("/");
  return r && o.unshift(r), o.map(h).join("");
}
function M(t, e = void 0) {
  t = l(t);
  let r = $(t), o = D(r), s = h(o.name);
  return e ? h(e) + s : s;
}
function f(t, e, r = void 0) {
  const o = /* @__PURE__ */ new Map(), s = /* @__PURE__ */ new Map();
  return Array.isArray(e) && (e = Object.fromEntries(e.map((n) => [n, void 0]))), typeof e == "string" && (e = { [e]: void 0 }), Object.entries(e).forEach(([n, i]) => {
    i && d(m(t.root, i), s, o, r), d(m(t.root, n), s, void 0, r);
  }), { components: s, vendors: o };
}
function d(t, e, r = void 0, o = void 0) {
  T(t).forEach((s) => {
    let n = M(s, o), i = I(t, s, o), u = j(t, s, o);
    s = l(s), r && r.set(u, { global: n, name: u, laravel: i, path: s }), e.set(u, { global: n, name: u, laravel: i, path: s });
  });
}
function x(t) {
  let e = [];
  return t.forEach((r) => e.push(`import ${r.global} from '${r.path}';`)), e.push("export {"), t.forEach((r) => e.push(`  ${r.global},`)), e.push("};"), e.push(""), e.push("export function createOtherSoftwareAutoloader() {"), e.push("  return {"), e.push("    install(app) {"), t.forEach((r) => e.push(`      app.component('${r.global}', ${r.global});`)), e.push("    },"), e.push("  };"), e.push("};"), e.push(""), e.join(`
`);
}
function w(t, e, r) {
  let o = p.resolve(t.root, e), s = p.resolve(o, "components.d.ts"), n = [];
  n.push("// THIS FILE IS AUTOGENERATED!"), n.push("// DO NOT EDIT!"), n.push(""), n.push("declare module '@app/components' {"), n.push("  import { Plugin } from 'vue';"), n.push("  export function createOtherSoftwareAutoloader(): Plugin;"), n.push(""), r.forEach((i) => n.push(`  export { default as ${i.global} } from '${l(p.relative(o, i.path))}';`)), n.push("}"), n.push(""), a.writeFileSync(s, n.join(`
`));
}
function v(t, e, r) {
  let o = p.resolve(t.root, e), s = p.resolve(o, "vue.d.ts"), n = [];
  n.push("// THIS FILE IS AUTOGENERATED!"), n.push("// DO NOT EDIT!"), n.push(""), n.push("declare module '@vue/runtime-core' {"), n.push("  export interface GlobalComponents {"), r.forEach((i) => n.push(`    ${i.global}: typeof import('${l(p.relative(o, i.path))}')['default'],`)), n.push("  }"), n.push("}"), n.push(""), n.push("export {}"), n.push(""), a.writeFileSync(s, n.join(`
`));
}
function g(t) {
  return Array.isArray(t) ? [t.at(0), void 0] : typeof t == "string" ? [t, void 0] : Object.entries(t).at(0);
}
function E(t, e, r = !0) {
  const o = g(e.target);
  if (!o)
    throw new Error("Unknown target for output files!");
  let [s, n] = o, i = f(t, e.components);
  return n && (w(t, n, i.vendors), v(t, n, i.vendors)), w(t, s, i.components), v(t, s, i.components), r ? x(i.components) : null;
}
function R(t) {
  let e = [];
  return t.forEach((r) => e.push(`import ${r.name} from '${r.path}';`)), e.push(""), e.push("const ViewsRepository = {"), t.forEach((r) => e.push(`  '${r.laravel}': ${r.name},`)), e.push("};"), e.push(""), e.push("export function createViewResolver(name) {"), e.push("  const view = ViewsRepository[name];"), e.push(""), e.push("  if (!view) {"), e.push(`    throw new Error('View "' + name + '" not found!');`), e.push("  }"), e.push(""), e.push("  return view;"), e.push("}"), e.push(""), e.join(`
`);
}
function y(t, e) {
  let r = p.resolve(t.root, e), o = p.resolve(r, "views.d.ts"), s = [];
  s.push("// THIS FILE IS AUTOGENERATED!"), s.push("// DO NOT EDIT!"), s.push(""), s.push("declare module '@app/views' {"), s.push("  export function createViewResolver(name: string): any;"), s.push("}"), s.push(""), a.writeFileSync(o, s.join(`
`));
}
function S(t, e, r) {
  let o = p.resolve(t.root, e), s = p.resolve(o, ".phpstorm.meta.php"), n = [], i = [];
  r.forEach((u) => i.push(`'${u.laravel}'`)), n.push("<?php"), n.push(""), n.push("namespace PHPSTORM_META {"), n.push(`  registerArgumentsSet('vueApplicationViews', ${i.join(", ")});`), n.push(""), n.push("  expectedArguments(\\OtherSoftware\\Bridge\\ResponseFactory::view(), 0, argumentsSet('vueApplicationViews'));"), n.push("  expectedArguments(\\OtherSoftware\\Support\\Facades\\Vue::view(), 0, argumentsSet('vueApplicationViews'));"), n.push("}"), n.push(""), a.writeFileSync(s, n.join(`
`));
}
function A(t, e, r = !0) {
  const o = g(e.target);
  if (!o)
    throw new Error("Unknown target for output files!");
  let [s, n] = o;
  const i = f(t, e.views, e.namespace);
  return n && (y(t, n), S(t, n, i.vendors)), y(t, s), S(t, s, i.components), r ? R(i.components) : null;
}
let c;
function V(t, e) {
  let r = f(t, e.views, e.namespace);
  c = /* @__PURE__ */ new Set(), r.components.forEach((o) => {
    c.add(o.path);
  });
}
function C(t, e) {
  V(t, e);
}
function b(t, e, r, o) {
  c || V(t, e);
  const s = O.normalize(o);
  if (!o.endsWith(".vue") || !c.has(s))
    return { code: r, map: null };
  if (r.includes("<template>") && !r.includes("<RouterView") && !r.includes("<router-view")) {
    const n = r.lastIndexOf("</template>"), i = r.slice(0, n), u = r.slice(n);
    return { code: `${i}
  <RouterView />
${u}`, map: null };
  }
  return { code: r, map: null };
}
function N(t) {
  let e;
  function r(o) {
    E(e, t, !1), A(e, t, !1), C(e, t);
    const s = o.moduleGraph.getModuleById("\0@app/components"), n = o.moduleGraph.getModuleById("\0@app/views");
    s && o.reloadModule(s), n && o.reloadModule(n);
  }
  return {
    name: "vue-autoloader",
    enforce: "pre",
    configResolved(o) {
      e = o;
    },
    resolveId(o) {
      if (o === "@app/components") return "\0@app/components";
      if (o === "@app/views") return "\0@app/views";
    },
    load(o) {
      if (o === "\0@app/components") return E(e, t);
      if (o === "\0@app/views") return A(e, t);
    },
    async transform(o, s) {
      return b(e, t, o, s);
    },
    configureServer(o) {
      const s = (n) => {
        n.endsWith(".vue") && r(o);
      };
      o.watcher.on("add", s), o.watcher.on("unlink", s), o.watcher.on("addDir", s), o.watcher.on("unlinkDir", s);
    }
  };
}
export {
  N as default
};
