import i from "node:fs";
import u, { basename as A, parse as T, resolve as c } from "node:path";
import { normalizePath as a } from "vite";
function D(t) {
  let e = [];
  return t.forEach((r) => e.push(`import ${r.global} from '${r.path}';`)), e.push("export {"), t.forEach((r) => e.push(`  ${r.global},`)), e.push("};"), e.push(""), e.push("export function createOtherSoftwareAutoLoader() {"), e.push("  return {"), e.push("    install(app) {"), t.forEach((r) => e.push(`      app.component('${r.global}', ${r.global});`)), e.push("    },"), e.push("  };"), e.push("};"), e.push(""), e.join(`
`);
}
function h(t, e, r) {
  let n = u.resolve(t.root, e), s = u.resolve(n, "components.d.ts"), o = [];
  o.push("// THIS FILE IS AUTOGENERATED!"), o.push("// DO NOT EDIT!"), o.push(""), o.push("declare module '@app/components' {"), o.push("  import { Plugin } from 'vue';"), o.push("  export function createAutoLoader(): Plugin;"), o.push(""), r.forEach((p) => o.push(`  export { default as ${p.global} } from '${a(u.relative(n, p.path))}';`)), o.push("}"), o.push(""), i.writeFileSync(s, o.join(`
`));
}
function f(t, e, r) {
  let n = u.resolve(t.root, e), s = u.resolve(n, "vue.d.ts"), o = [];
  o.push("// THIS FILE IS AUTOGENERATED!"), o.push("// DO NOT EDIT!"), o.push(""), o.push("declare module '@vue/runtime-core' {"), o.push("  export interface GlobalComponents {"), r.forEach((p) => o.push(`    ${p.name}: typeof import('${a(u.relative(n, p.path))}')['default'],`)), o.push("  }"), o.push("}"), o.push(""), o.push("export {}"), o.push(""), i.writeFileSync(s, o.join(`
`));
}
function S(t, e = [".vue"], r = []) {
  return i.existsSync(t) && i.readdirSync(t).forEach((s) => {
    const o = u.join(t, s);
    i.statSync(o).isDirectory() ? r = S(o, e, r) : e.forEach((l) => {
      o.endsWith(l) && r.push(o);
    });
  }), r;
}
function O(t) {
  return t.replace(/[A-Z]/g, (e, r) => (r !== 0 ? "_" : "") + e.toLowerCase());
}
function y(t) {
  return t.charAt(0).toUpperCase() + t.slice(1);
}
function $(t, e) {
  return e = a(e), t = a(t), e.replace(t, "").replace(/^\//, "").replace(".vue", "").split("/").map(O).join(".");
}
function I(t, e) {
  return e = a(e), t = a(t), e.replace(t, "").replace(/^\//, "").replace(".vue", "").split("/").map(y).join("");
}
function j(t) {
  t = a(t);
  let e = A(t), r = T(e);
  return y(r.name);
}
function g(t, e) {
  const r = /* @__PURE__ */ new Map(), n = /* @__PURE__ */ new Map();
  return Object.entries(e).forEach(([s, o]) => {
    o && m(c(t.root, o), n, r), m(c(t.root, s), n);
  }), { components: n, vendors: r };
}
function m(t, e, r = void 0) {
  S(t).forEach((n) => {
    let s = j(n), o = $(t, n), p = I(t, n);
    n = a(n), r && r.set(s, { global: s, name: p, laravel: o, path: n }), e.set(s, { global: s, name: p, laravel: o, path: n });
  });
}
function d(t, e, r = !0) {
  const n = Object.entries(e.target).at(0);
  if (!n)
    throw new Error("Unknown target for output files!");
  let [s, o] = n, p = g(t, e.components);
  return o && (h(t, o, p.vendors), f(t, o, p.vendors)), h(t, s, p.components), f(t, s, p.components), r ? D(p.components) : null;
}
function F(t) {
  let e = [];
  return t.forEach((r) => e.push(`import ${r.name} from '${r.path}';`)), e.push("const ViewsRepository = {"), t.forEach((r) => e.push(`  '${r.laravel}': ${r.name},`)), e.push("};"), e.push(""), e.push("export function createViewResolver(name) {"), e.push("  const view = ViewsRepository[name];"), e.push(""), e.push("  if (!view) {"), e.push(`    throw new Error('View "' + name + '" not found!');`), e.push("  }"), e.push(""), e.push("  return view;"), e.push("}"), e.push(""), e.join(`
`);
}
function w(t, e) {
  let r = u.resolve(t.root, e), n = u.resolve(r, "views.d.ts"), s = [];
  s.push("// THIS FILE IS AUTOGENERATED!"), s.push("// DO NOT EDIT!"), s.push(""), s.push("declare module '@app/views' {"), s.push("  export function createViewResolver(name: string): any;"), s.push("}"), s.push(""), i.writeFileSync(n, s.join(`
`));
}
function v(t, e, r) {
  let n = u.resolve(t.root, e), s = u.resolve(n, ".phpstorm.meta.php"), o = [], p = [];
  r.forEach((l) => p.push(`'${l.laravel}'`)), o.push("<?php"), o.push(""), o.push("namespace PHPSTORM_META {"), o.push(`  registerArgumentsSet('vueApplicationViews', ${p.join(", ")});`), o.push(""), o.push("  expectedArguments(\\OtherSoftware\\Foundation\\Frontend\\Factory::view(), 0, argumentsSet('vueApplicationViews'));"), o.push("  expectedArguments(\\OtherSoftware\\Foundation\\Facades\\Frontend::view(), 0, argumentsSet('vueApplicationViews'));"), o.push("}"), o.push(""), i.writeFileSync(s, o.join(`
`));
}
function E(t, e, r = !0) {
  const n = Object.entries(e.target).at(0);
  if (!n)
    throw new Error("Unknown target for output files!");
  let [s, o] = n;
  const p = g(t, e.views);
  return o && (w(t, o), v(t, o, p.vendors)), w(t, s), v(t, s, p.components), r ? F(p.components) : null;
}
function x(t) {
  let e;
  function r(n) {
    d(e, t, !1), E(e, t, !1);
    const s = n.moduleGraph.getModuleById("\0@app/components"), o = n.moduleGraph.getModuleById("\0@app/views");
    s && n.reloadModule(s), o && n.reloadModule(o);
  }
  return {
    name: "vue-autoloader",
    configResolved(n) {
      e = n;
    },
    resolveId(n) {
      if (n === "@app/components") return "\0@app/components";
      if (n === "@app/views") return "\0@app/views";
    },
    load(n) {
      if (n === "\0@app/components") return d(e, t);
      if (n === "\0@app/views") return E(e, t);
    },
    configureServer(n) {
      const s = (o) => {
        o.endsWith(".vue") && r(n);
      };
      n.watcher.on("add", s), n.watcher.on("unlink", s), n.watcher.on("addDir", s), n.watcher.on("unlinkDir", s);
    }
  };
}
export {
  x as default
};
