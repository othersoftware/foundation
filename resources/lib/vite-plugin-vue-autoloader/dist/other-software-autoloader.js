import { normalizePath as l } from "vite";
import p from "node:fs";
import * as V from "node:path";
import i, { basename as O, parse as D, resolve as m } from "node:path";
function T(t, e = [".vue"], n = []) {
  return p.existsSync(t) && p.readdirSync(t).forEach((s) => {
    const r = i.join(t, s);
    p.statSync(r).isDirectory() ? n = T(r, e, n) : e.forEach((a) => {
      r.endsWith(a) && n.push(r);
    });
  }), n;
}
function h(t) {
  return t.charAt(0).toUpperCase() + t.slice(1);
}
function I(t, e, n = void 0) {
  e = l(e), t = l(t);
  let o = e.replace(t, "").replace(/^\//, "").replace(".vue", "").split("/").join(".");
  return n ? n + "::" + o : o;
}
function j(t, e, n = void 0) {
  e = l(e), t = l(t);
  let o = e.replace(t, "").replace(/^\//, "").replace(".vue", "").split("/");
  return n && o.unshift(n), o.map(h).join("");
}
function M(t, e = void 0) {
  t = l(t);
  let n = O(t), o = D(n), s = h(o.name);
  return e ? h(e) + s : s;
}
function f(t, e, n = void 0) {
  const o = /* @__PURE__ */ new Map(), s = /* @__PURE__ */ new Map();
  return Array.isArray(e) && (e = Object.fromEntries(e.map((r) => [r, void 0]))), typeof e == "string" && (e = { [e]: void 0 }), Object.entries(e).forEach(([r, u]) => {
    u && d(m(t.root, u), s, o, n), d(m(t.root, r), s, void 0, n);
  }), { components: s, vendors: o };
}
function d(t, e, n = void 0, o = void 0) {
  T(t).forEach((s) => {
    let r = M(s, o), u = I(t, s, o), a = j(t, s, o);
    s = l(s), n && n.set(a, { global: r, name: a, laravel: u, path: s }), e.set(a, { global: r, name: a, laravel: u, path: s });
  });
}
function x(t) {
  let e = [];
  return t.forEach((n) => e.push(`import ${n.global} from '${n.path}';`)), e.push("export {"), t.forEach((n) => e.push(`  ${n.global},`)), e.push("};"), e.push(""), e.push("export function createOtherSoftwareAutoloader() {"), e.push("  return {"), e.push("    install(app) {"), t.forEach((n) => e.push(`      app.component('${n.global}', ${n.global});`)), e.push("    },"), e.push("  };"), e.push("};"), e.push(""), e.join(`
`);
}
function w(t, e, n, o) {
  let s = i.resolve(t.root, n), r = i.resolve(s, "components.d.ts"), u = [];
  u.push("// THIS FILE IS AUTOGENERATED!"), u.push("// DO NOT EDIT!"), u.push(""), u.push(`declare module '@${e.namespace}/components' {`), u.push("  import { Plugin } from 'vue';"), u.push("  export function createOtherSoftwareAutoloader(): Plugin;"), u.push(""), o.forEach((a) => u.push(`  export { default as ${a.global} } from '${l(i.relative(s, a.path))}';`)), u.push("}"), u.push(""), p.writeFileSync(r, u.join(`
`));
}
function v(t, e, n) {
  let o = i.resolve(t.root, e), s = i.resolve(o, "vue.d.ts"), r = [];
  r.push("// THIS FILE IS AUTOGENERATED!"), r.push("// DO NOT EDIT!"), r.push(""), r.push("declare module '@vue/runtime-core' {"), r.push("  export interface GlobalComponents {"), n.forEach((u) => r.push(`    ${u.global}: typeof import('${l(i.relative(o, u.path))}')['default'],`)), r.push("  }"), r.push("}"), r.push(""), r.push("export {}"), r.push(""), p.writeFileSync(s, r.join(`
`));
}
function $(t) {
  return Array.isArray(t) ? [t.at(0), void 0] : typeof t == "string" ? [t, void 0] : Object.entries(t).at(0);
}
function E(t, e, n = !0) {
  const o = $(e.target);
  if (!o)
    throw new Error("Unknown target for output files!");
  let [s, r] = o, u = f(t, e.components);
  return r && (w(t, e, r, u.vendors), v(t, r, u.vendors)), w(t, e, s, u.components), v(t, s, u.components), n ? x(u.components) : null;
}
function R(t) {
  let e = [];
  return t.forEach((n) => e.push(`import ${n.name} from '${n.path}';`)), e.push(""), e.push("const ViewsRepository = {"), t.forEach((n) => e.push(`  '${n.laravel}': ${n.name},`)), e.push("};"), e.push(""), e.push("export function createViewResolver(name) {"), e.push("  const view = ViewsRepository[name];"), e.push(""), e.push("  if (!view) {"), e.push(`    throw new Error('View "' + name + '" not found!');`), e.push("  }"), e.push(""), e.push("  return view;"), e.push("}"), e.push(""), e.join(`
`);
}
function y(t, e, n) {
  let o = i.resolve(t.root, n), s = i.resolve(o, "views.d.ts"), r = [];
  r.push("// THIS FILE IS AUTOGENERATED!"), r.push("// DO NOT EDIT!"), r.push(""), r.push(`declare module '@${e.namespace}/views' {`), r.push("  export function createViewResolver(name: string): any;"), r.push("}"), r.push(""), p.writeFileSync(s, r.join(`
`));
}
function S(t, e, n) {
  let o = i.resolve(t.root, e), s = i.resolve(o, ".phpstorm.meta.php"), r = [], u = [];
  n.forEach((a) => u.push(`'${a.laravel}'`)), r.push("<?php"), r.push(""), r.push("namespace PHPSTORM_META {"), r.push(`  registerArgumentsSet('vueApplicationViews', ${u.join(", ")});`), r.push(""), r.push("  expectedArguments(\\OtherSoftware\\Bridge\\ResponseFactory::view(), 0, argumentsSet('vueApplicationViews'));"), r.push("  expectedArguments(\\OtherSoftware\\Support\\Facades\\Vue::view(), 0, argumentsSet('vueApplicationViews'));"), r.push("}"), r.push(""), p.writeFileSync(s, r.join(`
`));
}
function A(t, e, n = !0) {
  const o = $(e.target);
  if (!o)
    throw new Error("Unknown target for output files!");
  let [s, r] = o;
  const u = f(t, e.views, e.namespace);
  return r && (y(t, e, r), S(t, r, u.vendors)), y(t, e, s), S(t, s, u.components), n ? R(u.components) : null;
}
let c;
function g(t, e) {
  let n = f(t, e.views, e.namespace);
  c = /* @__PURE__ */ new Set(), n.components.forEach((o) => {
    c.add(o.path);
  });
}
function C(t, e) {
  g(t, e);
}
function b(t, e, n, o) {
  c || g(t, e);
  const s = V.normalize(o);
  if (!o.endsWith(".vue") || !c.has(s))
    return { code: n, map: null };
  if (n.includes("<template>") && !n.includes("<RouterView") && !n.includes("<router-view")) {
    const r = n.lastIndexOf("</template>"), u = n.slice(0, r), a = n.slice(r);
    return { code: `${u}
  <RouterView />
${a}`, map: null };
  }
  return { code: n, map: null };
}
function N(t) {
  let e;
  function n(o) {
    E(e, t, !1), A(e, t, !1), C(e, t);
    const s = o.moduleGraph.getModuleById("\0@" + t.namespace + "/components"), r = o.moduleGraph.getModuleById("\0@" + t.namespace + "/views");
    s && o.reloadModule(s), r && o.reloadModule(r);
  }
  return {
    name: "vue-autoloader",
    enforce: "pre",
    configResolved(o) {
      e = o;
    },
    resolveId(o) {
      if (o === "@" + t.namespace + "/components") return "\0@" + t.namespace + "/components";
      if (o === "@" + t.namespace + "/views") return "\0@" + t.namespace + "/views";
    },
    load(o) {
      if (o === "\0@" + t.namespace + "/components") return E(e, t);
      if (o === "\0@" + t.namespace + "/views") return A(e, t);
    },
    async transform(o, s) {
      return b(e, t, o, s);
    },
    configureServer(o) {
      const s = (r) => {
        r.endsWith(".vue") && n(o);
      };
      o.watcher.on("add", s), o.watcher.on("unlink", s), o.watcher.on("addDir", s), o.watcher.on("unlinkDir", s);
    }
  };
}
export {
  N as default
};
