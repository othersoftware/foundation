import { normalizePath as l } from "vite";
import p from "node:fs";
import * as $ from "node:path";
import i, { basename as O, parse as D, resolve as m } from "node:path";
function T(t, e = [".vue"], r = []) {
  return p.existsSync(t) && p.readdirSync(t).forEach((s) => {
    const o = i.join(t, s);
    p.statSync(o).isDirectory() ? r = T(o, e, r) : e.forEach((a) => {
      o.endsWith(a) && r.push(o);
    });
  }), r;
}
function h(t) {
  return t.charAt(0).toUpperCase() + t.slice(1);
}
function I(t, e, r = void 0) {
  e = l(e), t = l(t);
  let n = e.replace(t, "").replace(/^\//, "").replace(".vue", "").split("/").join(".");
  return r ? r + "::" + n : n;
}
function j(t, e, r = void 0) {
  e = l(e), t = l(t);
  let n = e.replace(t, "").replace(/^\//, "").replace(".vue", "").split("/");
  return r && n.unshift(r), n.map(h).join("");
}
function M(t, e = void 0) {
  t = l(t);
  let r = O(t), n = D(r), s = h(n.name);
  return e ? h(e) + s : s;
}
function f(t, e, r = void 0) {
  const n = /* @__PURE__ */ new Map(), s = /* @__PURE__ */ new Map();
  return Array.isArray(e) && (e = Object.fromEntries(e.map((o) => [o, void 0]))), typeof e == "string" && (e = { [e]: void 0 }), Object.entries(e).forEach(([o, u]) => {
    u && d(m(t.root, u), s, n, r), d(m(t.root, o), s, void 0, r);
  }), { components: s, vendors: n };
}
function d(t, e, r = void 0, n = void 0) {
  T(t).forEach((s) => {
    let o = M(s, n), u = I(t, s, n), a = j(t, s, n);
    s = l(s), r && r.set(a, { global: o, name: a, laravel: u, path: s }), e.set(a, { global: o, name: a, laravel: u, path: s });
  });
}
function x(t) {
  let e = [];
  return t.forEach((r) => e.push(`import ${r.global} from '${r.path}';`)), e.push("export {"), t.forEach((r) => e.push(`  ${r.global},`)), e.push("};"), e.push(""), e.push("export function createOtherSoftwareAutoloader() {"), e.push("  return {"), e.push("    install(app) {"), t.forEach((r) => e.push(`      app.component('${r.global}', ${r.global});`)), e.push("    },"), e.push("  };"), e.push("};"), e.push(""), e.join(`
`);
}
function w(t, e, r, n) {
  let s = i.resolve(t.root, r), o = i.resolve(s, "components.d.ts"), u = [];
  u.push("// THIS FILE IS AUTOGENERATED!"), u.push("// DO NOT EDIT!"), u.push(""), u.push(`declare module '@${e.namespace}/components' {`), u.push("  import { Plugin } from 'vue';"), u.push("  export function createOtherSoftwareAutoloader(): Plugin;"), u.push(""), n.forEach((a) => u.push(`  export { default as ${a.global} } from '${l(i.relative(s, a.path))}';`)), u.push("}"), u.push(""), p.writeFileSync(o, u.join(`
`));
}
function v(t, e, r) {
  let n = i.resolve(t.root, e), s = i.resolve(n, "vue.d.ts"), o = [];
  o.push("// THIS FILE IS AUTOGENERATED!"), o.push("// DO NOT EDIT!"), o.push(""), o.push("declare module '@vue/runtime-core' {"), o.push("  export interface GlobalComponents {"), r.forEach((u) => o.push(`    ${u.global}: typeof import('${l(i.relative(n, u.path))}')['default'],`)), o.push("  }"), o.push("}"), o.push(""), o.push("export {}"), o.push(""), p.writeFileSync(s, o.join(`
`));
}
function g(t) {
  return Array.isArray(t) ? [t.at(0), void 0] : typeof t == "string" ? [t, void 0] : Object.entries(t).at(0);
}
function E(t, e, r = !0) {
  const n = g(e.target);
  if (!n)
    throw new Error("Unknown target for output files!");
  let [s, o] = n, u = f(t, e.components);
  return o && (w(t, e, o, u.vendors), v(t, o, u.vendors)), w(t, e, s, u.components), v(t, s, u.components), r ? x(u.components) : null;
}
function R(t) {
  let e = [];
  return t.forEach((r) => e.push(`import ${r.name} from '${r.path}';`)), e.push(""), e.push("const ViewsRepository = {"), t.forEach((r) => e.push(`  '${r.laravel}': ${r.name},`)), e.push("};"), e.push(""), e.push("export function createViewResolver(name) {"), e.push("  const view = ViewsRepository[name];"), e.push(""), e.push("  if (!view) {"), e.push(`    throw new Error('View "' + name + '" not found!');`), e.push("  }"), e.push(""), e.push("  return view;"), e.push("}"), e.push(""), e.join(`
`);
}
function y(t, e) {
  let r = i.resolve(t.root, e), n = i.resolve(r, "views.d.ts"), s = [];
  s.push("// THIS FILE IS AUTOGENERATED!"), s.push("// DO NOT EDIT!"), s.push(""), s.push("declare module '@app/views' {"), s.push("  export function createViewResolver(name: string): any;"), s.push("}"), s.push(""), p.writeFileSync(n, s.join(`
`));
}
function S(t, e, r) {
  let n = i.resolve(t.root, e), s = i.resolve(n, ".phpstorm.meta.php"), o = [], u = [];
  r.forEach((a) => u.push(`'${a.laravel}'`)), o.push("<?php"), o.push(""), o.push("namespace PHPSTORM_META {"), o.push(`  registerArgumentsSet('vueApplicationViews', ${u.join(", ")});`), o.push(""), o.push("  expectedArguments(\\OtherSoftware\\Bridge\\ResponseFactory::view(), 0, argumentsSet('vueApplicationViews'));"), o.push("  expectedArguments(\\OtherSoftware\\Support\\Facades\\Vue::view(), 0, argumentsSet('vueApplicationViews'));"), o.push("}"), o.push(""), p.writeFileSync(s, o.join(`
`));
}
function A(t, e, r = !0) {
  const n = g(e.target);
  if (!n)
    throw new Error("Unknown target for output files!");
  let [s, o] = n;
  const u = f(t, e.views, e.namespace);
  return o && (y(t, o), S(t, o, u.vendors)), y(t, s), S(t, s, u.components), r ? R(u.components) : null;
}
let c;
function V(t, e) {
  let r = f(t, e.views, e.namespace);
  c = /* @__PURE__ */ new Set(), r.components.forEach((n) => {
    c.add(n.path);
  });
}
function C(t, e) {
  V(t, e);
}
function b(t, e, r, n) {
  c || V(t, e);
  const s = $.normalize(n);
  if (!n.endsWith(".vue") || !c.has(s))
    return { code: r, map: null };
  if (r.includes("<template>") && !r.includes("<RouterView") && !r.includes("<router-view")) {
    const o = r.lastIndexOf("</template>"), u = r.slice(0, o), a = r.slice(o);
    return { code: `${u}
  <RouterView />
${a}`, map: null };
  }
  return { code: r, map: null };
}
function N(t) {
  let e;
  function r(n) {
    E(e, t, !1), A(e, t, !1), C(e, t);
    const s = n.moduleGraph.getModuleById("\0@" + t.namespace + "/components"), o = n.moduleGraph.getModuleById("\0@" + t.namespace + "/views");
    s && n.reloadModule(s), o && n.reloadModule(o);
  }
  return {
    name: "vue-autoloader",
    enforce: "pre",
    configResolved(n) {
      e = n;
    },
    resolveId(n) {
      if (n === "@" + t.namespace + "/components") return "\0@" + t.namespace + "/components";
      if (n === "@" + t.namespace + "/views") return "\0@" + t.namespace + "/views";
    },
    load(n) {
      if (n === "\0@" + t.namespace + "/components") return E(e, t);
      if (n === "\0@" + t.namespace + "/views") return A(e, t);
    },
    async transform(n, s) {
      return b(e, t, n, s);
    },
    configureServer(n) {
      const s = (o) => {
        o.endsWith(".vue") && r(n);
      };
      n.watcher.on("add", s), n.watcher.on("unlink", s), n.watcher.on("addDir", s), n.watcher.on("unlinkDir", s);
    }
  };
}
export {
  N as default
};
