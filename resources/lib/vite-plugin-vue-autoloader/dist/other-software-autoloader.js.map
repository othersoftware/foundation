{"version":3,"file":"other-software-autoloader.js","sources":["../src/Utils/Scanner.ts","../src/Utils/Strings.ts","../src/Utils/Names.ts","../src/Services/Collector.ts","../src/Modules/Components/Compiler.ts","../src/Utils/Target.ts","../src/Modules/Components/index.ts","../src/Modules/Views/Compiler.ts","../src/Modules/Views/index.ts","../src/Services/ViewRouterTransformer.ts","../src/main.ts"],"sourcesContent":["import fs from 'node:fs';\nimport path from 'node:path';\n\nexport function scan(dir: string, extensions: string[] = ['.vue'], list: string[] = []) {\n  if (!fs.existsSync(dir)) {\n    return list;\n  }\n\n  const files = fs.readdirSync(dir);\n\n  files.forEach((file) => {\n    const resolved = path.join(dir, file);\n    const stats = fs.statSync(resolved);\n\n    if (stats.isDirectory()) {\n      list = scan(resolved, extensions, list);\n    } else {\n      extensions.forEach((extension) => {\n        if (resolved.endsWith(extension)) {\n          list.push(resolved);\n        }\n      });\n    }\n  });\n\n  return list;\n}\n","export function toSnakeCase(value: string) {\n  return value.replace(/[A-Z]/g, (match, offset) => (offset !== 0 ? '_' : '') + match.toLowerCase());\n}\n\nexport function toPascalCase(value: string) {\n  return value.charAt(0).toUpperCase() + value.slice(1);\n}\n","import { normalizePath } from 'vite';\nimport { parse, basename } from 'node:path';\nimport { toPascalCase } from './Strings';\n\nexport function asLaravel(path: string, absolute: string, namespace: string | null | false | undefined = undefined) {\n  absolute = normalizePath(absolute);\n  path = normalizePath(path);\n\n  let compiled = absolute.replace(path, '').replace(/^\\//, '').replace('.vue', '').split('/').join('.');\n\n  if (namespace) {\n    return namespace + '::' + compiled;\n  }\n\n  return compiled;\n}\n\nexport function asComponent(path: string, absolute: string, namespace: string | null | false | undefined = undefined) {\n  absolute = normalizePath(absolute);\n  path = normalizePath(path);\n\n  let segments = absolute.replace(path, '').replace(/^\\//, '').replace('.vue', '').split('/');\n\n  if (namespace) {\n    segments.unshift(namespace);\n  }\n\n  return segments.map(toPascalCase).join('');\n}\n\nexport function asGlobalComponent(absolute: string, namespace: string | null | false | undefined = undefined) {\n  absolute = normalizePath(absolute);\n\n  let base = basename(absolute);\n  let parsed = parse(base);\n  let name = toPascalCase(parsed.name);\n\n  if (namespace) {\n    return toPascalCase(namespace) + name;\n  }\n\n  return name;\n}\n","import { type ResolvedConfig, normalizePath } from 'vite';\nimport { scan } from '../Utils/Scanner';\nimport { asGlobalComponent, asLaravel, asComponent } from '../Utils/Names';\nimport { resolve } from 'node:path';\n\nexport type ResolvedComponent = { global: string, name: string, laravel: string, path: string }\nexport type ComponentsMap = Map<string, ResolvedComponent>\nexport type ViewsCollection = { components: ComponentsMap, vendors: ComponentsMap }\n\ntype Local = string;\ntype Vendor = string | null | undefined;\ntype Namespace = string | null | false | undefined;\ntype Sources = Record<Local, Vendor> | Local[] | Local;\n\nexport function collect(config: ResolvedConfig, sources: Sources, namespace: Namespace = undefined): ViewsCollection {\n  const vendors: ComponentsMap = new Map();\n  const components: ComponentsMap = new Map();\n\n  if (Array.isArray(sources)) {\n    sources = Object.fromEntries(sources.map((s) => [s, undefined]));\n  }\n\n  if (typeof sources === 'string') {\n    sources = { [sources]: undefined };\n  }\n\n  Object.entries(sources).forEach(([local, vendor]) => {\n    if (vendor) {\n      scanComponents(resolve(config.root, vendor), components, vendors, namespace);\n    }\n\n    scanComponents(resolve(config.root, local), components, undefined, namespace);\n  });\n\n  return { components, vendors };\n}\n\nfunction scanComponents(source: string, components: ComponentsMap, vendors: ComponentsMap | undefined = undefined, namespace: Namespace = undefined) {\n  scan(source).forEach((path) => {\n    let global = asGlobalComponent(path, namespace);\n    let laravel = asLaravel(source, path, namespace);\n    let name = asComponent(source, path, namespace);\n\n    path = normalizePath(path);\n\n    if (vendors) {\n      vendors.set(name, { global, name, laravel, path });\n    }\n\n    components.set(name, { global, name, laravel, path });\n  });\n}\n","import fs from 'node:fs';\nimport path from 'node:path';\nimport { normalizePath, type ResolvedConfig } from 'vite';\nimport { type ComponentsMap } from '../../Services/Collector';\nimport type { Options } from '../../Types/Options.ts';\n\nexport function compileComponentsModule(components: ComponentsMap) {\n  let lines: string[] = [];\n\n  components.forEach((resolved) => lines.push(`import ${resolved.global} from '${resolved.path}';`));\n  lines.push(`export {`);\n  components.forEach((resolved) => lines.push(`  ${resolved.global},`));\n  lines.push(`};`);\n  lines.push(``);\n  lines.push(`export function createOtherSoftwareAutoloader() {`);\n  lines.push(`  return {`);\n  lines.push(`    install(app) {`);\n  components.forEach((resolved) => lines.push(`      app.component('${resolved.global}', ${resolved.global});`));\n  lines.push(`    },`);\n  lines.push(`  };`);\n  lines.push(`};`);\n  lines.push(``);\n\n  return lines.join('\\n');\n}\n\nexport function writeComponentsDeclarations(config: ResolvedConfig, options: Options, target: string, components: ComponentsMap) {\n  let directory = path.resolve(config.root, target);\n  let declarations = path.resolve(directory, 'components.d.ts');\n  let lines: string[] = [];\n\n  lines.push(`// THIS FILE IS AUTOGENERATED!`);\n  lines.push(`// DO NOT EDIT!`);\n  lines.push(``);\n  lines.push(`declare module '@${options.namespace}/components' {`);\n  lines.push(`  import { Plugin } from 'vue';`);\n  lines.push(`  export function createOtherSoftwareAutoloader(): Plugin;`);\n  lines.push(``);\n  components.forEach((resolved) => lines.push(`  export { default as ${resolved.global} } from '${normalizePath(path.relative(directory, resolved.path))}';`));\n  lines.push(`}`);\n  lines.push(``);\n\n  fs.writeFileSync(declarations, lines.join('\\n'));\n}\n\nexport function writeVueDeclarations(config: ResolvedConfig, target: string, components: ComponentsMap) {\n  let directory = path.resolve(config.root, target);\n  let declarations = path.resolve(directory, 'vue.d.ts');\n  let lines: string[] = [];\n\n  lines.push(`// THIS FILE IS AUTOGENERATED!`);\n  lines.push(`// DO NOT EDIT!`);\n  lines.push(``);\n  lines.push(`declare module '@vue/runtime-core' {`);\n  lines.push(`  export interface GlobalComponents {`);\n  components.forEach((resolved) => lines.push(`    ${resolved.global}: typeof import('${normalizePath(path.relative(directory, resolved.path))}')['default'],`));\n  lines.push(`  }`);\n  lines.push(`}`);\n  lines.push(``);\n  lines.push(`export {}`);\n  lines.push(``);\n\n  fs.writeFileSync(declarations, lines.join('\\n'));\n}\n","type Local = string;\ntype Vendor = string | null | undefined;\ntype Config = Record<Local, Vendor> | Local[] | Local;\n\nexport function resolveTargetDirectory(target: Config): [Local, Vendor] {\n  if (Array.isArray(target)) {\n    return [target.at(0)!, undefined];\n  }\n\n  if (typeof target === 'string') {\n    return [target, undefined];\n  }\n\n  return Object.entries(target).at(0)!;\n}\n","import { type ResolvedConfig } from 'vite';\nimport { writeComponentsDeclarations, writeVueDeclarations, compileComponentsModule } from './Compiler';\nimport { collect } from '../../Services/Collector';\nimport { type Options } from '../../Types/Options';\nimport { resolveTargetDirectory } from '../../Utils/Target.ts';\n\nexport function provideVirtualComponentsModule(config: ResolvedConfig, options: Options, compile: boolean = true) {\n  const target = resolveTargetDirectory(options.target);\n\n  if (!target) {\n    throw new Error('Unknown target for output files!');\n  }\n\n  let [local, vendor] = target;\n  let views = collect(config, options.components);\n\n  if (vendor) {\n    writeComponentsDeclarations(config, options, vendor, views.vendors);\n    writeVueDeclarations(config, vendor, views.vendors);\n  }\n\n  writeComponentsDeclarations(config, options, local, views.components);\n  writeVueDeclarations(config, local, views.components);\n\n  if (compile) {\n    return compileComponentsModule(views.components);\n  }\n\n  return null;\n}\n","import path from 'node:path';\nimport fs from 'node:fs';\nimport { type ComponentsMap } from '../../Services/Collector';\nimport { type ResolvedConfig } from 'vite';\nimport type { Options } from '../../Types/Options.ts';\n\nexport function compileViewsModule(views: ComponentsMap) {\n  let lines: string[] = [];\n\n  views.forEach((resolved) => lines.push(`import ${resolved.name} from '${resolved.path}';`));\n  lines.push(``);\n  lines.push(`const ViewsRepository = {`);\n  views.forEach((resolved) => lines.push(`  '${resolved.laravel}': ${resolved.name},`));\n  lines.push(`};`);\n  lines.push(``);\n  lines.push(`export function createViewResolver(name) {`);\n  lines.push(`  const view = ViewsRepository[name];`);\n  lines.push(``);\n  lines.push(`  if (!view) {`);\n  lines.push(`    throw new Error('View \"' + name + '\" not found!');`);\n  lines.push(`  }`);\n  lines.push(``);\n  lines.push(`  return view;`);\n  lines.push(`}`);\n  lines.push(``);\n\n  return lines.join('\\n');\n}\n\nexport function writeComponentsDeclarations(config: ResolvedConfig, options: Options, target: string) {\n  let directory = path.resolve(config.root, target);\n  let declarations = path.resolve(directory, 'views.d.ts');\n  let lines: string[] = [];\n\n  lines.push(`// THIS FILE IS AUTOGENERATED!`);\n  lines.push(`// DO NOT EDIT!`);\n  lines.push(``);\n  lines.push(`declare module '@${options.namespace}/views' {`);\n  lines.push(`  export function createViewResolver(name: string): any;`);\n  lines.push(`}`);\n  lines.push(``);\n\n  fs.writeFileSync(declarations, lines.join('\\n'));\n}\n\nexport function writePhpstormMeta(config: ResolvedConfig, target: string, views: ComponentsMap) {\n  let directory = path.resolve(config.root, target);\n  let meta = path.resolve(directory, '.phpstorm.meta.php');\n  let lines: string[] = [];\n\n  let compiled: string[] = [];\n\n  views.forEach((view) => compiled.push(`'${view.laravel}'`));\n\n  lines.push(`<?php`);\n  lines.push(``);\n  lines.push(`namespace PHPSTORM_META {`);\n  lines.push(`  registerArgumentsSet('vueApplicationViews', ${compiled.join(', ')});`);\n  lines.push(``);\n  lines.push(`  expectedArguments(\\\\OtherSoftware\\\\Bridge\\\\ResponseFactory::view(), 0, argumentsSet('vueApplicationViews'));`);\n  lines.push(`  expectedArguments(\\\\OtherSoftware\\\\Support\\\\Facades\\\\Vue::view(), 0, argumentsSet('vueApplicationViews'));`);\n  lines.push(`}`);\n  lines.push(``);\n\n  fs.writeFileSync(meta, lines.join('\\n'));\n}\n","import { type ResolvedConfig } from 'vite';\nimport { writeComponentsDeclarations, compileViewsModule, writePhpstormMeta } from './Compiler';\nimport { collect } from '../../Services/Collector';\nimport { type Options } from '../../Types/Options';\nimport { resolveTargetDirectory } from '../../Utils/Target.ts';\n\nexport function provideVirtualViewsModule(config: ResolvedConfig, options: Options, compile: boolean = true) {\n  const target = resolveTargetDirectory(options.target);\n\n  if (!target) {\n    throw new Error('Unknown target for output files!');\n  }\n\n  let [local, vendor] = target;\n  const views = collect(config, options.views, options.namespace);\n\n  if (vendor) {\n    writeComponentsDeclarations(config, options, vendor);\n    writePhpstormMeta(config, vendor, views.vendors);\n  }\n\n  writeComponentsDeclarations(config, options, local);\n  writePhpstormMeta(config, local, views.components);\n\n  if (compile) {\n    return compileViewsModule(views.components);\n  }\n\n  return null;\n}\n","import * as path from 'node:path';\nimport { type ResolvedConfig } from 'vite';\nimport { collect } from './Collector.ts';\nimport type { Options } from '../Types/Options.ts';\n\nlet viewsMap: Map<string, Set<string>> = new Map;\n\nfunction collectViewsSet(config: ResolvedConfig, options: Options) {\n  let collection = collect(config, options.views, options.namespace);\n  let namespace = options.namespace || 'default';\n  let views = new Set() as Set<string>;\n\n  viewsMap.set(namespace, views);\n\n  collection.components.forEach(component => {\n    views.add(path.normalize(component.path));\n  });\n\n  collection.vendors.forEach(component => {\n    views.add(path.normalize(component.path));\n  });\n}\n\nexport function resetViewsSet(config: ResolvedConfig, options: Options) {\n  collectViewsSet(config, options);\n}\n\nexport function transformViewComponent(config: ResolvedConfig, options: Options, code: string, id: string) {\n  if (!viewsMap.has(options.namespace || 'default')) {\n    collectViewsSet(config, options);\n  }\n\n  const resolvedId = path.normalize(id);\n\n  // Check if the file is one of views components and is a Vue component\n  if (!id.endsWith('.vue') || !viewsMap.get(options.namespace || 'default')!.has(resolvedId)) {\n    return { code, map: null };\n  }\n\n  // Check if the template exists and doesn't already contain RouterView\n  // Add RouterView at the end of the template when necessary\n  if (code.includes('<template>') && !code.includes('<RouterView') && !code.includes('<router-view')) {\n    const templateEnd = code.lastIndexOf('</template>');\n    const beforeTemplate = code.slice(0, templateEnd);\n    const afterTemplate = code.slice(templateEnd);\n\n    return { code: `${beforeTemplate}\\n  <RouterView />\\n${afterTemplate}`, map: null };\n  }\n\n  return { code, map: null };\n}\n","import type { Plugin, ResolvedConfig, ViteDevServer } from 'vite';\nimport type { Options } from './Types/Options';\nimport { provideVirtualComponentsModule } from './Modules/Components';\nimport { provideVirtualViewsModule } from './Modules/Views';\nimport { transformViewComponent, resetViewsSet } from './Services/ViewRouterTransformer.ts';\n\n\nexport default function autoloader(options: Options): Plugin {\n  let config: ResolvedConfig;\n\n  function refreshDeclarations(server: ViteDevServer) {\n    provideVirtualComponentsModule(config, options, false);\n    provideVirtualViewsModule(config, options, false);\n\n    resetViewsSet(config, options);\n\n    const components = server.moduleGraph.getModuleById('\\0@' + options.namespace + '/components');\n    const views = server.moduleGraph.getModuleById('\\0@' + options.namespace + '/views');\n\n    if (components) {\n      server.reloadModule(components);\n    }\n\n    if (views) {\n      server.reloadModule(views);\n    }\n  }\n\n  return {\n    name: 'vue-autoloader',\n    enforce: 'pre',\n\n    configResolved(resolvedConfig) {\n      config = resolvedConfig;\n    },\n\n    resolveId(id) {\n      if (id === '@' + options.namespace + '/components') return '\\0@' + options.namespace + '/components';\n      if (id === '@' + options.namespace + '/views') return '\\0@' + options.namespace + '/views';\n    },\n\n    load(id) {\n      if (id === '\\0@' + options.namespace + '/components') return provideVirtualComponentsModule(config, options);\n      if (id === '\\0@' + options.namespace + '/views') return provideVirtualViewsModule(config, options);\n    },\n\n    async transform(code, id) {\n      return transformViewComponent(config, options, code, id);\n    },\n\n    configureServer(server) {\n      const handler = (path: string) => {\n        if (path.endsWith('.vue')) {\n          refreshDeclarations(server);\n        }\n      };\n\n      server.watcher.on('add', handler);\n      server.watcher.on('unlink', handler);\n      server.watcher.on('addDir', handler);\n      server.watcher.on('unlinkDir', handler);\n    },\n  };\n}\n"],"names":["path","writeComponentsDeclarations"],"mappings":"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"}